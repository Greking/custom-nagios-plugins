#!/bin/sh

# Nagios plugin to check for regular and security updates availability

# Copyright (c) 2012 Simon Deziel <simon.deziel@gmail.com>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# Explicitly set the PATH to that of ENV_SUPATH in /etc/login.defs and unset
# various other variables. For details, see:
# https://wiki.ubuntu.com/SecurityTeam/AppArmorPolicyReview#Execute_rules
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export ENV=
export CDPATH=

STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
MSG_OK="APT OK"
MSG_WARNING="APT WARNING"
MSG_CRITICAL="APT CRITICAL"
MSG_UNKNOWN="APT UNKNOWN"
SCRIPT_NAME="$(basename $0)"
BIN="/usr/lib/update-notifier/apt-check"
perf_data="|"
check_timeout=10
TIMEOUT_BIN="$(/usr/bin/which timeout 2> /dev/null)"

p_ok () {
  echo "$MSG_OK: $1$perf_data"
  exit "$STATE_OK"
}
p_warning () {
  echo "$MSG_WARNING: $1$perf_data"
  exit "$STATE_WARNING"
}
p_critical () {
  echo "$MSG_CRITICAL: $1$perf_data"
  exit "$STATE_CRITICAL"
}
p_unknown () {
  echo "$MSG_UNKNOWN: $1$perf_data"
  exit "$STATE_UNKNOWN"
}

usage () {
  cat << EOF
Usage:
  $SCRIPT_NAME [-h] [-t timeout]

Options:
 -h
    Print help screen
 -t
    Seconds before execution times out (default: 10)
EOF
}

long_usage () {
  cat << EOF
Copyright (c) 2012 Simon Deziel

This plugin checks for regular and security updates availability

EOF
  usage
  exit 0
}

# Check arguments
if [ "$#" -eq 1 ] && [ "$1" = "-h" ]; then
  long_usage
elif [ "$#" -eq 2 ] && [ "$1" = "-t" ]; then
  if echo "$2" | grep -qE '^[0-9]+(\.[0-9]+)?$'; then
    check_timeout="$2"
  fi
elif [ "$#" -ne 0 ]; then
  p_unknown "Unknown/invalid argument, see $SCRIPT_NAME -h for help"
fi

# Check if the required binary is present
if [ ! -x "$BIN" ]; then
  p_unknown "$BIN is not available, hint install update-notifier-common"
fi

# Check if all worked
[ -n "$TIMEOUT_BIN" ] || check_timeout=""
updates="$($TIMEOUT_BIN $check_timeout $BIN 2>&1)"
RC="$?"
if [ "$RC" -eq 124 ]; then
  p_critical "Plugin timed out after $check_timeout seconds"
elif [ "$RC" -ne 0 ]; then
  p_unknown "$BIN returned $RC"
fi

# Check if output is well-formed
if ! echo "$updates" | grep -qE '^[0-9]+;[0-9]+$'; then
  p_unknown "$BIN output not as expected: $updates"
fi

# All was fine so far so let's see how many updates are pending
regular_updates="$(echo "$updates"|cut -d ';' -f1)"
security_updates="$(echo "$updates"|cut -d ';' -f2)"
perf_data="|regular=$regular_updates;;;0 security=$security_updates;;1;0"

# Nothing pending?
if [ "${regular_updates};${security_updates}" = '0;0' ]; then
  p_ok "All packages are up-to-date"
fi

if [ "$security_updates" != 0 ]; then
  p_critical "$regular_updates updates available ($security_updates critical)"
elif [ "$regular_updates" != 0 ]; then
  p_warning "$regular_updates updates available ($security_updates critical)"
fi

# We shouldn't get here
p_unknown "Unknown error, try executing $BIN manually"
