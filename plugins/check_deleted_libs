#!/bin/sh

# Nagios plugin to check for processes using deleted libraries

# Copyright (c) 2014 Simon Deziel <simon.deziel@gmail.com>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# Explicitly set the PATH to that of ENV_SUPATH in /etc/login.defs and unset
# various other variables. For details, see:
# https://wiki.ubuntu.com/SecurityTeam/AppArmorPolicyReview#Execute_rules
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export ENV=
export CDPATH=

STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
MSG_OK="OK"
MSG_WARNING="WARNING"
MSG_CRITICAL="CRITICAL"
MSG_UNKNOWN="UNKNOWN"
SCRIPT_NAME="$(basename $0)"
GETOPT="/usr/bin/getopt"
perf_data="|"
check_timeout=10
max_count=0
TIMEOUT_BIN="$(/usr/bin/which timeout 2> /dev/null)"

p_ok () {
  echo "$MSG_OK: $1$perf_data"
  exit "$STATE_OK"
}
p_warning () {
  echo "$MSG_WARNING: $1$perf_data"
  exit "$STATE_WARNING"
}
p_critical () {
  echo "$MSG_CRITICAL: $1$perf_data"
  exit "$STATE_CRITICAL"
}
p_unknown () {
  echo "$MSG_UNKNOWN: $1$perf_data"
  exit "$STATE_UNKNOWN"
}

usage () {
  cat << EOF
Usage:
  $SCRIPT_NAME [-h] [-m max_count] [-t timeout]

Options:
 -h
    Print help screen
 -m
    Maximum number of processes to report (default: 0, means infinite)
 -t
    Seconds before execution times out (default: 10)
EOF
}

long_usage () {
  cat << EOF
Copyright (c) 2014 Simon Deziel

This plugin checks for processes using deleted libraries

EOF
  usage
  exit 0
}

# Check if getopt is available
if [ ! -x "$GETOPT" ]; then
  p_unknown "$GETOPT is not available, hint install util-linux"
fi

# Note that we use `"$@"' to let each command-line parameter expand to a
# separate word. The quotes around `$@' are essential!
# We need TEMP as the `eval set --' would nuke the return value of getopt.
TEMP=`$GETOPT -q -s sh -n $SCRIPT_NAME -o +hm:t: -- "$@"`
if [ $? != 0 ]; then
  p_unknown "Unknown/invalid argument, see $SCRIPT_NAME -h for help"
fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

# Parse arguments
while test "$1" != "--"; do case "$1" in
      -h) long_usage; shift;;
      -m) echo "$2" | grep -qE '^[0-9]+(\.[0-9]+)?$' && max_count="$2"; shift 2;;
      -t) echo "$2" | grep -qE '^[0-9]+(\.[0-9]+)?$' && check_timeout="$2"; shift 2;;
      --) shift ; break;;
      *)  p_unknown "Internal error";;
   esac
done

# Check if /proc/*/maps are readable by testing with PID=1
cat /proc/1/maps >/dev/null 2>&1
if [ "$?" -ne 0 ]; then
  p_unknown "Unable to read /proc/1/maps, are you running $SCRIPT_NAME with root privileges?"
fi

# Enumerate all processes which use deleted libs
[ -n "$TIMEOUT_BIN" ] || check_timeout=""
processes="$($TIMEOUT_BIN $check_timeout sh -c '
for pid in $(grep -HE "[[:space:]](\(deleted\)/.+/lib[^/]+|/.+/lib[^/]+ \(deleted\))$" /proc/[0-9]*/maps 2>/dev/null | sed "/\.#prelink#\./d; s#^/proc/\([0-9]\+\)/maps:.*#\1#"); do
  sed -n "/^Name:[[:space:]]\+/ s/^Name:[[:space:]]\+//p;q" /proc/$pid/status 2> /dev/null
done | sort -u | paste -s -d " "' 2>&1)"
RC="$?"
if [ "$RC" -eq 124 ]; then
  p_critical "Plugin timed out after $check_timeout seconds"
elif [ "$RC" -ne 0 ]; then
  p_unknown "$SCRIPT_NAME returned $RC"
fi

# Report processes using deleted libs (if any)
if [ -n "$processes" ]; then
  if [ "$max_count" -eq 0 ]; then
    p_warning "Processes using deleted libs: $processes"
  else
    reduced_list="$(echo $processes | cut -d\  -f 1-${max_count})"
    if [ "$processes" != "$reduced_list" ]; then
      p_warning "Processes using deleted libs: $reduced_list ..."
    else
      p_warning "Processes using deleted libs: $processes"
    fi
  fi
else
  p_ok "No deleted lib in use"
fi

# We shouldn't get here
p_unknown "Unknown error, try executing $SCRIPT_NAME manually"
