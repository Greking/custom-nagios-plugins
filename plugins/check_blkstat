#!/bin/bash

# Nagios plugin to monitor block I/O and bandwidth

# Copyright (c) 2012 Simon Deziel <simon.deziel@gmail.com>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


# Example configuration
#
# This check needs to be installed on the monitoring target and executed through
# NRPE. NRPE config extract example:
#
# command[check_kernel]=/usr/lib/nagios/plugins/check_blkstat -d sda -w 200,10,10 -c 250,20,20
#
# And the config extract to add to Nagios' config:
#
# define service {
#   use                 'generic-service'
#   service_description 'Disk I/O and bandwidth'
#   check_command       'check_nrpe!check_blkstat'
# }
#
# This plugin is useful to identify high I/O activity.

STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
MSG_OK="BLKSTAT OK"
MSG_WARNING="BLKSTAT WARNING"
MSG_CRITICAL="BLKSTAT CRITICAL"
MSG_UNKNOWN="BLKSTAT UNKNOWN"
SCRIPT_NAME=$(basename $0)

p_ok () {
  echo "$MSG_OK: $1"
  exit "$STATE_OK"
}
p_warning () {
  echo "$MSG_WARNING: $1"
  exit "$STATE_WARNING"
}
p_critical () {
  echo "$MSG_CRITICAL: $1"
  exit "$STATE_CRITICAL"
}
p_unknown () {
  echo "$MSG_UNKNOWN: $1"
  exit "$STATE_UNKNOWN"
}

usage () {
  cat << EOF
Usage:
  $SCRIPT_NAME -d <disk> -w <io/s>,<read MiB/s>,<write MiB/s> -c <io/s>,<read MiB/s>,<write MiB/s> | -h
EOF
}

long_usage () {
  cat << EOF
Copyright (c) 2012 Simon Deziel

This plugin checks the block device I/O and bandwidth statistics

EOF
  usage
  cat << EOF

This plugin checks when I/O and or bandwidth of a block device are higher than
the warning/critical thresholds.
EOF
  exit 0
}

check_args () {
  # check block dev
  [ -z "$DISK" ]     && p_unknown "Specify a block device using -d <block>, ex: -d sda"

  # Warning thresholds
  [ -z "$WARNING" ]  && p_unknown "Missing warning thresholds, use -w <io/s,read,write>"
  WARN_IOPS="$(echo "$WARNING" | cut -d , -f 1)"
  WARN_READ="$(echo "$WARNING" | cut -d , -f 2)"
  WARN_WRITE="$(echo "$WARNING" | cut -d , -f 3)"
  [ -z "$WARN_IOPS" -o -z "$WARN_READ" -o -z "$WARN_WRITE" ] && p_unknown "Invalid warning thresholds, use -w <io/s,read,write>"

  # Critical thresholds
  [ -z "$CRITICAL" ] && p_unknown "Missing critical thresholds, use -c <io/s,read,write>"
  CRIT_IOPS="$(echo "$CRITICAL" | cut -d , -f 1)"
  CRIT_READ="$(echo "$CRITICAL" | cut -d , -f 2)"
  CRIT_WRITE="$(echo "$CRITICAL" | cut -d , -f 3)"
  [ -z "$CRIT_IOPS" -o -z "$CRIT_READ" -o -z "$CRIT_WRITE" ] && p_unknown "Invalid critical thresholds, use -c <io/s,read,write>"
}

parse_stats () {
  # Previous stats
  [ -z "$PREVIOUS_DISK_STAT" ] && p_unknown "Invalid previous disk stats"
  PREVIOUS_IO_READ="$(echo $PREVIOUS_DISK_STAT | awk '{print $1}')"
  PREVIOUS_SECTOR_READ="$(echo $PREVIOUS_DISK_STAT | awk '{print $3}')"
  PREVIOUS_IO_WRITE="$(echo $PREVIOUS_DISK_STAT | awk '{print $5}')"
  PREVIOUS_SECTOR_WRITE="$(echo $PREVIOUS_DISK_STAT | awk '{print $7}')"

  # Current stats
  [ -z "$CURRENT_DISK_STAT" ] && p_unknown "Invalid previous disk stats"
  CURRENT_IO_READ="$(echo $CURRENT_DISK_STAT | awk '{print $1}')"
  CURRENT_SECTOR_READ="$(echo $CURRENT_DISK_STAT | awk '{print $3}')"
  CURRENT_IO_WRITE="$(echo $CURRENT_DISK_STAT | awk '{print $5}')"
  CURRENT_SECTOR_WRITE="$(echo $CURRENT_DISK_STAT | awk '{print $7}')"
}

# Check arguments
if [ "$#" -eq 1 ] && [ "$1" = "-h" ]; then
  long_usage
elif [ "$#" -ne 6 ]; then
  p_unknown "Wrong argument count, see $SCRIPT_NAME -h for help"
fi

# process command line args
while [ ! -z "$1" ]; do
  case $1 in
    -d|--disk)     shift; DISK="$1";;
    -w|--warning)  shift; WARNING="$1";;
    -c|--critical) shift; CRITICAL="$1";;
    -h|--help)     long_usage;;
  esac
  shift
done

# Check args
check_args

# Make sure the supplied disk is really a block device
[ -b "/dev/$DISK" ] || p_unknown "$DISK is not a block device"

# From Documentation/block/stat.txt:
# These values count the number of sectors read from or written to this
# block device.  The "sectors" in question are the standard UNIX 512-byte
# sectors, not any device- or filesystem-specific block size.  The
# counters are incremented when the I/O completes.
BLK_SECTOR_SZ=512

# Get current disk stats
[ -r "/sys/block/$DISK/stat" ] || p_unknown "Unable to read the current disk stats"
read CURRENT_DISK_STAT < "/sys/block/$DISK/stat"

# Get previous disk stats
PREVIOUS_STAT_FILE="/var/tmp/$SCRIPT_NAME.$DISK"
if [ ! -e "$PREVIOUS_STAT_FILE" ]; then
  echo "$CURRENT_DISK_STAT" > "$PREVIOUS_STAT_FILE"
  # XXX: returning unknown should not send a notification since
  #      Nagios check multiple times before alerting
  p_unknown "First run, no info on previous run yet."
fi
[ -r "$PREVIOUS_STAT_FILE" ] || p_unknown "Unable to read the previous disk stats"
read PREVIOUS_DISK_STAT < "$PREVIOUS_STAT_FILE"

# Parse stats
parse_stats

# Elapsed time between current and previous run
CURRENT_RUN_TIMESTAMP="$(date +%s)"
PREVIOUS_RUN_TIMESTAMP="$(stat --printf="%Y\n" $PREVIOUS_STAT_FILE)"
TIME_DELTA="$(($CURRENT_RUN_TIMESTAMP - $PREVIOUS_RUN_TIMESTAMP))"

# Save current run stats into previous stat file
echo "$CURRENT_DISK_STAT" > "$PREVIOUS_STAT_FILE"

exit 0
