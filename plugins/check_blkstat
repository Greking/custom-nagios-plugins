#!/bin/sh

# Nagios plugin to monitor block I/O and bandwidth

# Copyright (c) 2012 Simon Deziel <simon.deziel@gmail.com>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


# Example configuration
#
# This check needs to be installed on the monitoring target and executed through
# NRPE. NRPE config extract example:
#
# command[check_blkstat]=/usr/lib/nagios/plugins/check_blkstat -d sda -w 200,10,10 -c 250,20,20
#
# And the config extract to add to Nagios' config:
#
# define service {
#   use                 'generic-service'
#   service_description 'Disk I/O and bandwidth'
#   check_command       'check_nrpe!check_blkstat'
# }
#
# This plugin is useful to identify high I/O activity.

STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
MSG_OK="BLKSTAT OK"
MSG_WARNING="BLKSTAT WARNING"
MSG_CRITICAL="BLKSTAT CRITICAL"
MSG_UNKNOWN="BLKSTAT UNKNOWN"
SCRIPT_NAME=$(basename $0)
DISK="sda" # Defaults to monitor sda
UNIT="m"   # Defaults to express bandwidth in MiB/s

p_ok () {
  echo "$MSG_OK: $1"
  exit "$STATE_OK"
}
p_warning () {
  echo "$MSG_WARNING: $1"
  exit "$STATE_WARNING"
}
p_critical () {
  echo "$MSG_CRITICAL: $1"
  exit "$STATE_CRITICAL"
}
p_unknown () {
  echo "$MSG_UNKNOWN: $1"
  exit "$STATE_UNKNOWN"
}

usage () {
  cat << EOF
Usage:
  $SCRIPT_NAME [ -d <disk> ] -w <io/s>,<read unit/s>,<write unit/s> -c <io/s>,<read unit/s>,<write unit/s> [ -u (k|m) ] | -h
EOF
}

long_usage () {
  cat << EOF
Copyright (c) 2012 Simon Deziel

This plugin checks the block device I/O and bandwidth statistics

EOF
  usage
  cat << EOF

This plugin checks when I/O and or bandwidth of a block device are higher than
the warning/critical thresholds.
EOF
  exit 0
}

check_args () {
  # check block dev
  [ -z "$DISK" ]     && p_unknown "Specify a block device using -d <block>, ex: -d sda"

  # Warning thresholds
  [ -z "$WARNING" ]  && p_unknown "Missing warning thresholds, use -w <io/s,read,write>"
  WARN_IOPS="$(echo "$WARNING" | cut -d , -f 1)"
  WARN_READ="$(echo "$WARNING" | cut -d , -f 2)"
  WARN_WRITE="$(echo "$WARNING" | cut -d , -f 3)"
  [ -z "$WARN_IOPS" -o -z "$WARN_READ" -o -z "$WARN_WRITE" ] && p_unknown "Invalid warning thresholds, use -w <io/s,read,write>"

  # Critical thresholds
  [ -z "$CRITICAL" ] && p_unknown "Missing critical thresholds, use -c <io/s,read,write>"
  CRIT_IOPS="$(echo "$CRITICAL" | cut -d , -f 1)"
  CRIT_READ="$(echo "$CRITICAL" | cut -d , -f 2)"
  CRIT_WRITE="$(echo "$CRITICAL" | cut -d , -f 3)"
  [ -z "$CRIT_IOPS" -o -z "$CRIT_READ" -o -z "$CRIT_WRITE" ] && p_unknown "Invalid critical thresholds, use -c <io/s,read,write>"

  # Units
  # From Documentation/block/stat.txt:
  # These values count the number of sectors read from or written to this
  # block device.  The "sectors" in question are the standard UNIX 512-byte
  # sectors, not any device- or filesystem-specific block size.  The
  # counters are incremented when the I/O completes.
  if [ "$UNIT" = "m" ]; then
    # 1 MiB: 1048576 bytes => 2048 x 512 bytes sectors
    SECTOR_PER_UNIT="2048"
    UNIT_TXT="MiB/s"
  elif [ "$UNIT" = "k" ]; then
    # 1 KiB: 1024 bytes => 2 x 512 bytes sectors
    SECTOR_PER_UNIT="2"
    UNIT_TXT="KiB/s"
  else
    p_unknown "Invalid bandwidth unit ($UNIT), use -u (m|k)"
  fi
}

parse_stats () {
  # Previous stats
  [ -z "$PREVIOUS_DISK_STAT" ] && rm -f "$PREVIOUS_STAT_FILE" && p_unknown "Invalid previous disk stats"
  PREVIOUS_IO_READ="$(echo $PREVIOUS_DISK_STAT | awk '{print $1}')"
  PREVIOUS_SECTOR_READ="$(echo $PREVIOUS_DISK_STAT | awk '{print $3}')"
  PREVIOUS_IO_WRITE="$(echo $PREVIOUS_DISK_STAT | awk '{print $5}')"
  PREVIOUS_SECTOR_WRITE="$(echo $PREVIOUS_DISK_STAT | awk '{print $7}')"
  [ -z "$PREVIOUS_IO_READ" -o -z "$PREVIOUS_SECTOR_READ" -o -z "$PREVIOUS_IO_WRITE" -o -z "$PREVIOUS_SECTOR_WRITE" ] && \
    rm -f "$PREVIOUS_STAT_FILE" && p_unknown "Invalid previous block stats"

  # Current stats
  [ -z "$CURRENT_DISK_STAT" ] && p_unknown "Invalid previous disk stats"
  CURRENT_IO_READ="$(echo $CURRENT_DISK_STAT | awk '{print $1}')"
  CURRENT_SECTOR_READ="$(echo $CURRENT_DISK_STAT | awk '{print $3}')"
  CURRENT_IO_WRITE="$(echo $CURRENT_DISK_STAT | awk '{print $5}')"
  CURRENT_SECTOR_WRITE="$(echo $CURRENT_DISK_STAT | awk '{print $7}')"
  [ -z "$CURRENT_IO_READ" -o -z "$CURRENT_SECTOR_READ" -o -z "$CURRENT_IO_WRITE" -o -z "$CURRENT_SECTOR_WRITE" ] && \
    p_unknown "Invalid current block stats"
}

# Check arguments
if [ "$#" -eq 0 ]; then
  long_usage
fi

# process command line args
while [ ! -z "$1" ]; do
  case $1 in
    -d|--disk)     shift; DISK="$1";;
    -w|--warning)  shift; WARNING="$1";;
    -c|--critical) shift; CRITICAL="$1";;
    -h|--help)     long_usage;;
    -u|--unit)     shift; UNIT="$1";;
  esac
  shift
done

# Check args
check_args

# Get current disk stats
[ -r "/sys/block/$DISK/stat" ] || p_unknown "Unable to read the current disk stats"
read CURRENT_DISK_STAT < "/sys/block/$DISK/stat"
[ -z "$CURRENT_DISK_STAT" ] && p_unknown "Unable to read the current disk stats"

# Get previous disk stats
PREVIOUS_STAT_FILE="/var/tmp/$SCRIPT_NAME.$DISK"
if [ ! -e "$PREVIOUS_STAT_FILE" ]; then
  echo "$CURRENT_DISK_STAT" > "$PREVIOUS_STAT_FILE"
  # XXX: returning unknown should not send a notification since
  #      Nagios check multiple times before alerting
  p_unknown "First run, no info on previous run yet."
fi
[ -r "$PREVIOUS_STAT_FILE" ] || p_unknown "Unable to read the previous disk stats"
read PREVIOUS_DISK_STAT < "$PREVIOUS_STAT_FILE"
[ -z "$PREVIOUS_DISK_STAT" ] && rm -f "$PREVIOUS_STAT_FILE" && \
  p_unknown "Unable to read the previous disk stats"

# Parse stats
parse_stats

# Elapsed time between current and previous run
CURRENT_RUN_TIMESTAMP="$(date +%s)"
PREVIOUS_RUN_TIMESTAMP="$(date +%s -r $PREVIOUS_STAT_FILE)"
TIME_DELTA="$(($CURRENT_RUN_TIMESTAMP - $PREVIOUS_RUN_TIMESTAMP))"
[ "$TIME_DELTA" -lt 1 ] && p_unknown "Invalid time delta between previous and current runs"

# Save current run stats into previous stat file
echo "$CURRENT_DISK_STAT" > "$PREVIOUS_STAT_FILE"

# Delta
IO_READ_DELTA="$(($CURRENT_IO_READ - $PREVIOUS_IO_READ))"
IO_WRITE_DELTA="$(($CURRENT_IO_WRITE - $PREVIOUS_IO_WRITE))"
SECTOR_READ_DELTA="$(($CURRENT_SECTOR_READ - $PREVIOUS_SECTOR_READ))"
SECTOR_WRITE_DELTA="$(($CURRENT_SECTOR_WRITE - $PREVIOUS_SECTOR_WRITE))"
[ "$IO_READ_DELTA" -lt 0 -o "$IO_WRITE_DELTA" -lt 0 -o "$SECTOR_READ_DELTA" -lt 0 -o "$SECTOR_WRITE_DELTA" -lt 0 ] && \
  p_unknown "Invalid block stats delta"

# Metrics
IOPS="$((($IO_READ_DELTA + IO_WRITE_DELTA) / $TIME_DELTA))"
BANDWIDTH_READ="$((($SECTOR_READ_DELTA / $SECTOR_PER_UNIT) / $TIME_DELTA))"
BANDWIDTH_WRITE="$((($SECTOR_WRITE_DELTA / $SECTOR_PER_UNIT) / $TIME_DELTA))"
[ "$IOPS" -lt 0 -o "$BANDWIDTH_READ" -lt 0 -o "$BANDWIDTH_WRITE" -lt 0 ] && p_unknown "Invalid IO/s or bandwidth stats"

CRIT=0
WARN=0

# Compare IOPS against thresholds
IOPS_TXT="$IOPS IO/s"
if [ "$IOPS" -gt "$CRIT_IOPS" ]; then
  CRIT="1"
  IOPS_TXT="$IOPS_TXT (c=$CRIT_IOPS)"
elif [ "$IOPS" -gt "$WARN_IOPS" ]; then
  WARN="1"
  IOPS_TXT="$IOPS_TXT (w=$WARN_IOPS)"
fi

# Compare read bw against thresholds
READBW_TXT="read bw $BANDWIDTH_READ $UNIT_TXT"
if [ "$BANDWIDTH_READ" -gt "$CRIT_READ" ]; then
  CRIT="1"
  READBW_TXT="$READBW_TXT (c=$CRIT_READ)"
elif [ "$BANDWIDTH_READ" -gt "$WARN_READ" ]; then
  WARN="1"
  READBW_TXT="$READBW_TXT (w=$WARN_READ)"
fi

# Compare write bw against thresholds
WRITEBW_TXT="write bw $BANDWIDTH_WRITE $UNIT_TXT"
if [ "$BANDWIDTH_WRITE" -gt "$CRIT_WRITE" ]; then
  CRIT="1"
  WRITEBW_TXT="$WRITEBW_TXT (c=$CRIT_WRITE)"
elif [ "$BANDWIDTH_WRITE" -gt "$WARN_WRITE" ]; then
  WARN="1"
  WRITEBW_TXT="$WRITEBW_TXT (w=$WARN_WRITE)"
fi

# Output metrics and perf data
OUTPUT="$IOPS_TXT, $READBW_TXT, $WRITEBW_TXT|iops=$IOPS,read=$BANDWIDTH_READ$UNIT_TXT,write=$BANDWIDTH_WRITE$UNIT_TXT"
if [ "$CRIT" -eq 0 -a "$WARN" -eq 0 ]; then
  p_ok "$OUTPUT"
elif [ "$CRIT" -eq 1 ]; then
  p_critical "$OUTPUT"
else
  p_warning "$OUTPUT"
fi
